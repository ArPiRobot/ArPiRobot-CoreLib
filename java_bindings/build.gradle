plugins {
    id 'java-library'
    id 'c'
    id 'cpp'
}

repositories {
    jcenter()
}

dependencies {
    implementation files("build/libs.corelibjni/libarpirobotcorejni.so")
}


model {
    platforms {
        pi {
            architecture "arm"
            operatingSystem "linux"
        }
    }
    toolChains{
        gcc(Gcc){
            target("pi") {
                path System.properties['user.home'] + "/.arpirobot/toolchain/bin/"
                cCompiler.executable = "arm-linux-gnueabihf-gcc"
                cppCompiler.executable = "arm-linux-gnueabihf-g++"
                linker.executable = "arm-linux-gnueabihf-gcc"
                assembler.executable = "arm-linux-gnueabihf-as"
                cCompiler.withArguments { args ->
                    args << '-I'
                    args << projectDir.toString() + '/../cpp_library/include'
                }
                cppCompiler.withArguments { args ->
                    args << '-I'
                    args << projectDir.toString() + '/../cpp_library/include'
                }
                linker.withArguments { args ->
                    args << "-L" 
                    args << projectDir.toString() + '/../cpp_library/build'
                    args << "-larpirobot-core"
                }
            }
        }
    }
    components {
        arpirobotcorejni(NativeLibrarySpec) {
            targetPlatform "pi"
            binaries.withType(StaticLibraryBinarySpec) {
                buildable = false
            }
        }
    }
}

jar{
    dependsOn ":arpirobotcorejniSharedLibrary"
    from("build/libs/arpirobotcorejni/shared"){
        include "libarpirobotcorejni.so"
    }
}